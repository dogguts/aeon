name: CI

on:
  push:
    branches:    
        - main
        - master
        - 'feature/**'
        - 'hotfix/**'
  pull_request:
    branches:    
        - main
        - master
        - 'feature/**'
        - 'hotfix/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      name: Setup .NET Core 3.1
      with:
        dotnet-version: '3.1.x'
        source-url: https://nuget.pkg.github.com/dogguts/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - uses: actions/setup-dotnet@v1
      name: Setup .NET 5
      with:
        dotnet-version: '5.0.x'
        source-url: https://nuget.pkg.github.com/dogguts/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - uses: actions/setup-dotnet@v1
      name: Setup .NET 6
      with:
        dotnet-version: '6.0.x'
        source-url: https://nuget.pkg.github.com/dogguts/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - name: Build
      run: dotnet build aeon.sln --configuration Release
    - name: Test
      run: |
        dotnet test tests/Repository.Test.Integration --logger "github;name=test-report;GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}}" 

  runsamples:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #framework: [netcoreapp3.1, net5.0, net6.0]
        framework: [ {tfm: 'netcoreapp3.1', version: '3.1.x' }, {tfm: 'net5.0', version: '5.0.x' }, {tfm: 'net6.0', version: '6.0.x' } ]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      name: Setup .NET '3.1.x'
      with: 
        dotnet-version: '3.1.x'
        source-url: https://nuget.pkg.github.com/dogguts/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - uses: actions/setup-dotnet@v1
      name: Setup .NET 5
      with:
        dotnet-version: '5.0.x'
        source-url: https://nuget.pkg.github.com/dogguts/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - uses: actions/setup-dotnet@v1
      name: Setup .NET 6
      with:
        dotnet-version: '6.0.x'
        source-url: https://nuget.pkg.github.com/dogguts/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - name: Run Samples ${{ matrix.framework.tfm }}
      run: |
        echo TFM="${{ matrix.framework.tfm }}"
        dotnet --info
        find samples/ -name *.csproj -type f -exec ls -l {} \; -execdir dotnet run --framework '${{ matrix.framework.tfm }}' -v n {} +

  pack:
    needs: [build, runsamples]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      name: Setup .NET Core 3.1
      with:
        dotnet-version: '3.1.x'
        source-url: https://nuget.pkg.github.com/dogguts/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - uses: actions/setup-dotnet@v1
      name: Setup .NET 5
      with:
        dotnet-version: '5.0.x'
        source-url: https://nuget.pkg.github.com/dogguts/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - uses: actions/setup-dotnet@v1
      name: Setup .NET 6
      with:
        dotnet-version: '6.0.x'
        source-url: https://nuget.pkg.github.com/dogguts/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - name: Runtime environment
      shell: bash
      env:
        WORKSPACE: ${{ github.workspace }}
      run: |
        echo GH_SHORT_SHA="`git rev-parse --short "$GITHUB_SHA"`" >> $GITHUB_ENV
    - name: Pack
      run: |
        dotnet pack src/Aeon.Core.Repository --configuration Release -o packages /p:VersionSuffix=$GITHUB_WORKFLOW-$GITHUB_RUN_NUMBER-${{ env.GH_SHORT_SHA }} /p:PackageProjectUrl=https://github.com/dogguts/aeon/tree/$GITHUB_SHA
        dotnet pack src/Aeon.Core.Repository.Extensions --configuration Release -o packages /p:VersionSuffix=$GITHUB_WORKFLOW-$GITHUB_RUN_NUMBER-${{ env.GH_SHORT_SHA }} /p:PackageProjectUrl=https://github.com/dogguts/aeon/tree/$GITHUB_SHA
    - name: Publish packages to GPR
      run: | 
        ls packages/*.*nupkg
        dotnet nuget push 'packages/*.nupkg' --skip-duplicate 
        
  documentation:
    runs-on: ubuntu-latest
     
    steps:
    - uses: actions/checkout@v2
    - uses: nuget/setup-nuget@v1
      with:
       nuget-version: '5.x'
    - name: Install docfx
      run: nuget install docfx.console -version 2.51.0
    - name: Run docfx        
      run: docfx.console.2.51.0/tools/docfx.exe ./docs/docfx.json

    - name: Deploy gh-pages
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: docs/_site/
#        echo "**Clone gh-pages"
#        git config --global user.email "bart.verthe@gmail.com"
#        git config --global user.name "Bart Verth√©"
#        
#        mkdir gh-pages-tmp
#        git clone https://github.com/${{ github.repository }}.git --branch gh-pages gh-pages-tmp
#        cd gh-pages-tmp 
#        ls -a
#        git rm -r *
#        cd ..
#        
#        echo "Copy docfx result"
#        cp -r docs/_site/* gh-pages-tmp/
#        cd gh-pages-tmp
#        git status --porcelain
#        
#        echo "git config"
#        git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ${{ secrets.GITHUB_TOKEN }}
#        git config --local -l
#        #echo "**Push gh-pages"
#        #git add . -A
#        #git commit -m "Update generated documentation"
#        #git push origin gh-pages
#
#
#
