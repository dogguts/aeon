<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aeon.Core.Repository.Extensions</name>
    </assembly>
    <members>
        <member name="T:Aeon.Core.Repository.RepositoryExtensions">
            <summary>
            Utility extensions on Repositories
            </summary>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.GetSingle``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepository{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0})">
            <summary>
            Returns the only entity matched by the Filter, throws an exception when there is not exactly one entity found
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity.</typeparam>
            <param name="repository">A IReadonlyRepository to return the single entity of</param>
            <param name="filter">A filter to test an entity for a condition.</param>
            <returns>The single matched entity.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.GetSingleAsync``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0})">
            <summary>
            Returns the only entity matched by the Filter, throws an exception when there is not exactly one entity found
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity.</typeparam>
            <param name="repository">A IReadonlyRepository to return the single entity of</param>
            <param name="filter">A filter to test an entity for a condition.</param>
            <returns>The single matched entity.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.GetSingleOrDefault``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepository{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0})">
            <summary>
            Returns the only entity matched by the Filter or a default value if no entity was found.
            Throws an exception if more than one element was found
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity.</typeparam>
            <param name="repository">A IReadonlyRepository to return the single entity of</param>
            <param name="filter">A filter to test an entity for a condition.</param>
            <returns>The single matched entity,  or default(TEntity) if none found</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.GetSingleOrDefaultAsync``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0})">
            <summary>
            Returns the only entity matched by the Filter or a default value if no entity was found.
            Throws an exception if more than one entity was found
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity</typeparam>
            <param name="repository">A IReadonlyRepository to return the single element of</param>
            <param name="filter">A filter to test an element for a condition.</param>
            <returns>The single matched entity,  or default(TEntity) if none found</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.GetFirst``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepository{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0})">
            <summary>
            Returns the first entity matched by the Filter 
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity</typeparam>
            <param name="repository">A IReadonlyRepository to return the single entity of</param>
            <param name="filter">A filter to test an entity for a condition.</param>
            <returns>The first matched entity in the repository.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.GetFirstAsync``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0})">
            <summary>
            Returns the first entity matched by the Filter 
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity</typeparam>
            <param name="repository">A IReadonlyRepository to return the single entity of</param>
            <param name="filter">A filter to test an entity for a condition.</param>
            <returns>The first matched entity in the repository.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.GetFirstOrDefault``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepository{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0})">
            <summary>
            Returns the first entity matched by the Filter 
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity</typeparam>
            <param name="repository">A IReadonlyRepository to return the single entity of</param>
            <param name="filter">A filter to test an entity for a condition.</param>
            <returns>The first matched entity in the repository.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.GetFirstOrDefaultAsync``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0})">
            <summary>
            Returns the first entity matched by the Filter 
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity</typeparam>
            <param name="repository">A IReadonlyRepository to return the single entity of</param>
            <param name="filter">A filter to test an entity for a condition.</param>
            <returns>The first matched entity in the repository.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.AsEnumerable``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepository{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0},Aeon.Core.Repository.Infrastructure.IRepositorySort{``0},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Returns all entities matched by the filter, optionally sorted and/or paged
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity</typeparam>
            <param name="repository">A IReadonlyRepository used to return the entities</param>
            <param name="filter">A filter to test entities for a condition.</param>
            <param name="sort">Optional sort specification</param>
            <param name="paging">Optional The current Page (one-based) and pageSize for paging</param>
            <returns>All matched entities, optionally sorted and/or optionally paged.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.AsEnumerableAsync``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0},Aeon.Core.Repository.Infrastructure.IRepositorySort{``0},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Returns all entities matched by the filter, optionally sorted and/or paged
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity</typeparam>
            <param name="repository">A IReadonlyRepository used to return the entities</param>
            <param name="filter">A filter to test entities for a condition.</param>
            <param name="sort">Optional sort specification</param>
            <param name="paging">Optional The current Page (one-based) and pageSize for paging</param>
            <returns>All matched entities, optionally sorted and/or optionally paged.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.GetCount``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepository{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0})">
            <summary>
            Returns number of entities matched by the filter
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity</typeparam>
            <param name="repository">A IReadonlyRepository used to count the entities</param>
            <param name="filter">A filter to test entities for a condition.</param>
            <returns>Total matched entities.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.RepositoryExtensions.GetCountAsync``1(Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync{``0},Aeon.Core.Repository.Infrastructure.IRepositoryFilter{``0})">
            <summary>
            Returns number of entities matched by the filter
            </summary>
            <typeparam name="TEntity">The type of the Repository Entity</typeparam>
            <param name="repository">A IReadonlyRepository used to count the entities</param>
            <param name="filter">A filter to test entities for a condition.</param>
            <returns>Total matched entities.</returns>
        </member>
    </members>
</doc>
