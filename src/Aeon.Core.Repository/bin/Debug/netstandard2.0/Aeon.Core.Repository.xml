<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aeon.Core.Repository</name>
    </assembly>
    <members>
        <member name="T:Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync`1">
            <summary>
            Defines the basic functionality for a asynchronous readonly repository
            </summary>
            <typeparam name="T">The entity type this asynchronous readonly repository handles</typeparam>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync`1.GetAsync(Aeon.Core.Repository.Infrastructure.IRepositoryInclude{`0},System.Object[])">
            <summary>
            Asynchronously gets an entity with the given primary key values.
            Also loads entity or entities referenced by navigation properties as defined in includes. 
            </summary>
            <param name="includes">Navigation properties to load</param>
            <param name="keyValues">The values of the primary key for the entity to get.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync`1.GetAsync(System.Object[])">
            <summary>
            Asynchronously gets an entity with the given primary key values.
            </summary>
            <param name="keyValues">The values of the primary key for the entity to get.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync`1.AllAsync(Aeon.Core.Repository.Infrastructure.IRepositoryInclude{`0})">
            <summary>
            Asynchronously get all entities of type T. 
            Also loads entity or entities referenced by navigation properties as defined in includes. 
            </summary>
            <param name="includes">Navigation properties to load</param>
            <returns>A task that represents the asynchronous fetch operation. An Enumerable of all entities of type T.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync`1.AllAsync">
            <summary>
            Asynchronously get all entities of type T. 
            </summary>
            <returns>All entities of type T.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync`1.GetWithFilterAsync(Aeon.Core.Repository.Infrastructure.IRepositoryFilter{`0},Aeon.Core.Repository.Infrastructure.IRepositorySort{`0},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Asynchronously get Entities by filter
            </summary>
            <param name="filter">Filter specification</param>
            <param name="sorts">Optional sort specification</param>
            <param name="paging">Optional The current Page and pageSize for paging</param>
            <returns>An Enumerable of entities of type T matching filter and sorted by sorts, paged by paging.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepositoryAsync`1.GetWithFilterAsync(System.ValueTuple{Aeon.Core.Repository.Infrastructure.IRepositoryFilter{`0},Aeon.Core.Repository.Infrastructure.IRepositorySort{`0}},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Asynchronously get Entities by filter
            </summary>
            <param name="specification">Filter and Sort specification</param>
            <param name="paging">Optional The current Page and pageSize for paging</param>
            <returns>An Enumerable of entities of type T matching filter and sorted by sorts, paged by paging.</returns>
        </member>
        <member name="T:Aeon.Core.Repository.Infrastructure.IReadonlyRepository`1">
            <summary>
            Defines the basic functionality for a synchronous readonly repository
            </summary>
            <typeparam name="T">The entity type this synchronous readonly repository handles</typeparam>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepository`1.Get(System.Object[])">
            <summary>
            Gets an entity with the given primary key values. 
            </summary>
            <param name="keyValues">The values of the primary key for the entity to get.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepository`1.Get(Aeon.Core.Repository.Infrastructure.IRepositoryInclude{`0},System.Object[])">
            <summary>
            Gets an entity with the given primary key values.  Also loads entity or entities referenced by navigation properties as defined in includes. 
            </summary>
            <param name="includes">Navigation properties to load</param>
            <param name="keyValues">The values of the primary key for the entity to get.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepository`1.All">
            <summary>
            Get all entities of type T. 
            </summary>
            <returns>An Enumerable of all entities of type T.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepository`1.All(Aeon.Core.Repository.Infrastructure.IRepositoryInclude{`0})">
            <summary>
            Get all entities of type T. Also loads entity or entities referenced by navigation properties as defined in includes. 
            </summary>
            <param name="includes">Navigation properties to load</param>
            <returns>An Enumerable of all entities of type T.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepository`1.GetWithFilter(Aeon.Core.Repository.Infrastructure.IRepositoryFilter{`0},Aeon.Core.Repository.Infrastructure.IRepositorySort{`0},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Get Entities by filter
            </summary>
            <param name="filter">Filter specification</param>
            <param name="sorts">Optional sort specification</param>
            <param name="paging">Optional The current Page and pageSize for paging</param>
            <returns>An Enumerable of entities of type T matching filter and sorted by sorts, paged by paging.</returns>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IReadonlyRepository`1.GetWithFilter(System.ValueTuple{Aeon.Core.Repository.Infrastructure.IRepositoryFilter{`0},Aeon.Core.Repository.Infrastructure.IRepositorySort{`0}},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Get Entities by filter
            </summary>
            <param name="specification">Filter and Sort specification</param>
            <param name="paging">Optional The current Page and pageSize for paging</param>
            <returns>An Enumerable of entities of type T matching filter and sorted by sorts, paged by paging.</returns>
        </member>
        <member name="T:Aeon.Core.Repository.Infrastructure.IRepositoryFilter`1">
            <summary>
            Defines the basic functionality of a repository filter.
            </summary>
            <typeparam name="T">The Entity type for the Filter</typeparam>
        </member>
        <member name="P:Aeon.Core.Repository.Infrastructure.IRepositoryFilter`1.Criteria">
            <summary>
            Criteria for the filter
            </summary>
        </member>
        <member name="T:Aeon.Core.Repository.Infrastructure.IRepositoryInclude`1">
            <summary>
            Defines the basic functionality to include navigation properties.
            </summary>
            <typeparam name="T">The type of entity containing the navigation properties</typeparam>
        </member>
        <member name="P:Aeon.Core.Repository.Infrastructure.IRepositoryInclude`1.IncludePaths">
            <summary>
             Paths to include for type.
            </summary>
        </member>
        <member name="P:Aeon.Core.Repository.Infrastructure.IRepositoryInclude`1.Includes">
            <summary>
            represents the paths to include.
            </summary>
        </member>
        <member name="T:Aeon.Core.Repository.Infrastructure.IRepositorySort`1">
            <summary>
            Defines the basic functionality of a repository sort.
            </summary>
            <typeparam name="T">The Entity type for the Sort</typeparam>
        </member>
        <member name="P:Aeon.Core.Repository.Infrastructure.IRepositorySort`1.Sorts">
            <summary>
            Sort specifications
            </summary>
            <value></value>
        </member>
        <member name="T:Aeon.Core.Repository.Infrastructure.IRepository`1">
            <summary>
            A generic interface for a Repository.
            </summary>
            <typeparam name="T">The Entity type for the Repository</typeparam>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IRepository`1.Add(`0)">
            <summary>
            Adds a new entity.
            </summary>
            <param name="entity"></param>    
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IRepository`1.Update(`0)">
            <summary>
            Marks an existing entity as updated.
            </summary>
            <param name="entity">The updated entity.</param>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IRepository`1.Delete(`0)">
            <summary>
            Marks an existing entity for deletion.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="T:Aeon.Core.Repository.Infrastructure.IUnitOfWork">
            <summary>
            Defines the basic functionality of a unit of work
            </summary>
        </member>
        <member name="M:Aeon.Core.Repository.Infrastructure.IUnitOfWork.Commit">
            <summary>
            Commits the unit of work
            </summary>
        </member>
        <member name="T:Aeon.Core.Repository.RepositoryInclude`1">
            <summary>
            Represents the navigation properties to include.
            </summary>
            <typeparam name="T">The type of entity containing the navigation properties</typeparam>
        </member>
        <member name="T:Aeon.Core.Repository.RepositoryIncludeExtensions">
            <summary>
            Creates a new first level include
            </summary>
        </member>
        <member name="T:Aeon.Core.Repository.RepositoryIncludeRoot`1">
            <summary>
            First level include definition
            </summary>
            <typeparam name="T">The type of entity containing the navigation properties</typeparam>
        </member>
        <member name="T:Aeon.Core.Repository.RepositoryIncludeExpression`1">
            <summary>
            Subsequent include definition
            </summary>
            <typeparam name="T">The type of entity containing the navigation properties</typeparam>
        </member>
        <member name="M:Aeon.Core.Repository.Repository`2.Add(`0)">
            <summary>
            Adds the given entity to the context underlying the set in the Added state.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:Aeon.Core.Repository.Repository`2.GetWithFilter(System.ValueTuple{Aeon.Core.Repository.Infrastructure.IRepositoryFilter{`0},Aeon.Core.Repository.Infrastructure.IRepositorySort{`0}},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Retrieve Entities with a filter
            </summary>
        </member>
        <member name="M:Aeon.Core.Repository.Repository`2.GetWithFilter(Aeon.Core.Repository.Infrastructure.IRepositoryFilter{`0},Aeon.Core.Repository.Infrastructure.IRepositorySort{`0},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Retrieve Entities with a filter
            </summary>
        </member>
        <member name="M:Aeon.Core.Repository.Repository`2.GetWithFilterAsync(System.ValueTuple{Aeon.Core.Repository.Infrastructure.IRepositoryFilter{`0},Aeon.Core.Repository.Infrastructure.IRepositorySort{`0}},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Retrieve Entities with a filter
            </summary>
        </member>
    </members>
</doc>
